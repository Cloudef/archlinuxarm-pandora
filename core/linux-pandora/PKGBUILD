# Maintainer: Jari Vetoniemi <mailroxas@gmail.com>

buildarch=4

pkgbase=linux-pandora
pkgname=('linux-pandora' 'linux-headers-pandora')
# pkgname=linux-custom    # Build kernel with different name
_kernelname=${pkgname#linux}
_basekernel=3.2
pkgver=${_basekernel}.30
pkgrel=1
pkgdesc="The linux kernel and modules for Pandora"
url="http://git.openpandora.org/cgi-bin/gitweb.cgi?p=pandora-kernel.git"
arch=('armv7h')
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'uboot-mkimage' 'git' 'make')
options=('!strip')
source=('boot.txt')
md5sums=('59910271e250fb5a748edbd4c4f19559')

build() {
   [[ -d "${srcdir}/pandora-kernel" ]] || {
      git clone --depth 1 -b pandora-3.2 --single-branch git://openpandora.org/pandora-kernel.git
   }
   cd "${srcdir}/pandora-kernel"

   #
   # do patching etc here..
   #

   # don't run depmod on 'make install'. We'll do this
   sed -i '2iexit 0' scripts/depmod.sh

   # configure
   make omap3_pandora_defconfig
   make prepare

   # load configuration
   # Configure the kernel. Replace the line below with one of your choice.
   #make menuconfig # CLI menu for configuration
   #make nconfig # new CLI menu for configuration
   #make xconfig # X-based configuration
   #make oldconfig # using old config from previous kernel version
   # ... or manually edit .config

   # Copy back our configuration (use with new kernel version)
   #cp ./.config ../${pkgver}.config

   ####################
   # stop here
   # this is useful to configure the kernel
   #msg "Stopping build"
   #return 1
   ####################

   #yes "" | make config

   # build
   make ${MAKEFLAGS} modules uImage
}

package_linux-pandora() {
   pkgdesc="The Linux Kernel and modules for Pandora"
   depends=('coreutils' 'linux-firmware' 'kmod')
   optdepends=('crda: to set the correct wireless channels of your country')
   provides=("linux=${pkgver}")
   conflicts=('kernel26' 'linux')
   replaces=('kernel26')
   install=${pkgname}.install

   cd "${srcdir}/pandora-kernel"

   KARCH=arm
   _kernver="$(make kernelrelease)"

   mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
   make INSTALL_MOD_PATH="${pkgdir}" modules_install
   cp arch/$KARCH/boot/uImage "${pkgdir}/boot/uImage"

   # set correct depmod command for install
   sed \
      -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
      -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
      -i "${startdir}/${pkgname}.install"

   # remove build and source links
   rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
   # remove the firmware
   rm -rf "${pkgdir}/lib/firmware"
   # gzip -9 all modules to save 100MB of space
   find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
   # make room for external modules
   ln -s "../extramodules-${pkgver}-${_kernelname:-ARCH}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
   # add real version for building modules and running depmod from post_install/upgrade
   mkdir -p "${pkgdir}/lib/modules/extramodules-${pkgver}-${_kernelname:-ARCH}"
   echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${pkgver}-${_kernelname:-ARCH}/version"

   # Now we call depmod...
   depmod -b "$pkgdir" -F System.map "$_kernver"

   # move module tree /lib -> /usr/lib
   mkdir -p "${pkgdir}/usr"
   mv "$pkgdir/lib" "$pkgdir/usr"

   # install boot.txt
   install -D -m775 "${srcdir}/boot.txt" "${pkgdir}/"
}

package_linux-headers-pandora() {
   pkgdesc="Header files and scripts for building modules for linux kernel for Pandora"
   provides=('kernel26-headers' "linux-headers=${pkgver}")
   conflicts=('kernel26-headers')
   replaces=('kernel26-headers')

   install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

   cd "${pkgdir}/usr/lib/modules/${_kernver}"
   ln -sf ../../../src/linux-${_kernver} build

   cd "${srcdir}/pandora-kernel"
   install -D -m644 Makefile \
      "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
   install -D -m644 kernel/Makefile \
      "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
   install -D -m644 .config \
      "${pkgdir}/usr/src/linux-${_kernver}/.config"

   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

   for i in acpi asm-generic config crypto drm generated linux math-emu \
      media net pcmcia scsi sound trace video xen; do
      cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
   done

   # copy arch includes for external modules
   mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH
   cp -a arch/$KARCH/include ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
   mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/mach-omap2
   cp -a arch/$KARCH/mach-omap2/include ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/mach-omap2/
   mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/plat-omap
   cp -a arch/$KARCH/plat-omap/include ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/plat-omap/

   # vmware etc..
   cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
   cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

   # fix permissions on scripts dir
   chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"
   cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
   cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

   # add headers for lirc package
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video"

   cp drivers/media/video/*.h  "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/"
   for i in bt8xx cpia2 cx25840 cx88 em28xx pwc saa7134 sn9c102; do
      mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/${i}"
      cp -a drivers/media/video/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/${i}"
   done

   # add docbook makefile
   install -D -m644 Documentation/DocBook/Makefile \
      "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

   # add dm headers
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
   cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

   # add inotify.h
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
   cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

   # add wireless headers
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
   cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

   # add dvb headers for external modules
   # in reference to:
   # http://bugs.archlinux.org/task/9912
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core"
   cp drivers/media/dvb/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core/"
   # and...
   # http://bugs.archlinux.org/task/11194
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
   cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"

   # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
   # in reference to:
   # http://bugs.archlinux.org/task/13146
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/"
   cp drivers/media/dvb/frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/"
   cp drivers/media/video/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/"

   # add dvb headers
   # in reference to:
   # http://bugs.archlinux.org/task/20402
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb"
   cp drivers/media/dvb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb/"
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends"
   cp drivers/media/dvb/frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/"
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners"
   cp drivers/media/common/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners/"

   # add xfs and shmem for aufs building
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
   mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
   cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

   # copy in Kconfig files
   for i in `find . -name "Kconfig*"`; do
      mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
      cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
   done

   chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
   find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

   # strip scripts directory
   find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
      case "$(file -bi "${binary}")" in
         *application/x-sharedlib*) # Libraries (.so)
            /usr/bin/strip ${STRIP_SHARED} "${binary}";;
         *application/x-archive*) # Libraries (.a)
            /usr/bin/strip ${STRIP_STATIC} "${binary}";;
         *application/x-executable*) # Binaries
            /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
      esac
   done

   # remove unneeded architectures
   rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arm26,avr32,blackfin,cris,frv,h8300,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,parisc,powerpc,ppc,s390,sh,sh64,sparc,sparc64,um,v850,x86,xtensa}
}

# vim: set ts=8 sw=3 tw=0
